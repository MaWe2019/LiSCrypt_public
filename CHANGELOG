# Changelog
Alle relevanten Änderungen an diesem Projekt werden in dieser Datei vermerkt.

Das Format basiert auf [Keep a Changelog](http://keepachangelog.com/de/1.0.0/)
und die Versionierung des Projekts richtet sich nach [Semantic Versioning](http://semver.org/spec/v2.0.0.html).

## [Unveröffentlicht]

## [1.0.18] - 2025-06-05
### Changed:
- LiSCrypt.py: Zusätzliche Debug-Outputs der Nonce-Zählerwerte zur Sicherstellung der kryptographischen Sicherheit

## [1.0.17] - 2025-06-03
### Changed:
- LiSCrypt.py: Rückverlagerung Verlagerung der Inkrementierung des Zählers
- LiSCrypt.py: Zusätzliche Überprüfung auf Zählererhöhung in den Nonce-Berechnungsmethoden (in Reaktion auf CERT F-1.3) (2)
- Beseitigung redaktioneller Ungenauigkeiten
- pyca/cryptography auf Version 45.0.3 aktualisiert
- PySide6 auf Version 6.9.0 aktualisiert

+ Change 2 ausgeschärft

## [1.0.16] - 2025-04-25
### Bug fix
- LiSCrypt.py: QControllerWorkerThread->ermittleChaCha20_V3Schluessel(...): Beseitigung einer Ungenauigkeiten des vorherigen Bug fixes

## [1.0.15] - 2025-04-25
### Bug fix
- LiSCrypt.py: QControllerWorkerThread->ermittleAESGCM_V3Schluessel(...): Ergänzung für den Fall, dass zwischen AESGCM und Chacha20 gewechselt wird
- LiSCrypt.py: QControllerWorkerThread->ermittleChaCha20_V3Schluessel(...): Ergänzung für den Fall, dass zwischen AESGCM und Chacha20 gewechselt wird
- Beseitigung kleinerer redaktioneller Ungenauigkeiten
### Changed:
- LiSCrypt.py: Verlagerung der Inkrementierung des Zählers der mit dem aktuellen Schlüssel durchgeführten AESGCM- und ChaCha20-Verschlüsselungen in die Nonce-Berechnungsmethoden (in Reaktion auf CERT F-1.3)
- LiSCrypt.py: QDatei->_entschluesseln: Entfernung von unzulässigen Zeichen aus Originaldateiname (in Reaktion auf CERT F-1.1)
- Ergänzung von requirements.txt um pathvalidate~=3.23

## [1.0.14] - 2025-03-27
### Bug fix
- Beseitigung diverser kleiner Ungenauigkeiten
- Korrektur: Initiale Sichtbarkeit des Umkehren- und Wiederholen-Buttons wieder auf False gesetzt
### Changed
- Entfernung diverser ungenutzter Imports
- Migration von PyQt5 zu PySide6 (Version 6.8.2.1)
- Paket pyca/cryptography auf Version 44.0.2 aktualisiert (war 43.0.3)
- psutil auf Version 7.0.0 aktualisiert (war 6.1.0)
- pywin32 auf Version 310 aktualisiert (war 308)
- Anleitung für Endnutzer auf Version 1.0.14 aktualisiert
- README.md auf Version 1.0.14 aktualisiert

## [1.0.13] - 2024-11-08
### Bug fix
- LiSKonstanten.py: C_PROGRAMMNAME_BYTES und _SHA256 entfernt (wurde nicht verwendet)
- LiSVernichtung.QVerzeichniseintrag: Type hint auf LiSCrypt.QController in __init__ zur Vermeidung eines circular import errors
### Changed
- LiSKrypto.QDatei: Methoden verschluesseln(...) und entschluesseln(...) verwenden jetzt die explizite Klasse AES256 aus pyca/cryptography (Neu seit Version 38.0.0) anstelle der generischen Variante AES
- LiSKonstanten.py: C_AKTUELLER_LOGIN_BYTES hinzugefügt (Verwendung in LiSSingleton.py zur Identifikation eines durch den aktuellen Nutzer bereits gestarteten Sevrers)
- Type hints zu allen Methodenparametern hinzugefügt
- Update aller Texte auf 2018-2024
- Python-Version auf Version 3.12.x aktualisiert (war 3.9.x)
- Paket pyca/cryptograph auf Version 43.0.3 (war 36.0.1)
- PyQt auf Version 5.15.11 aktualisiert (war 5.15.6)
- PyYAML auf Version 6.0.2 aktualisiert (war 6.0)
- psutil auf Version 6.1.0 aktualisiert (war 5.9.0)
- pywin32 auf Version 308 aktualisiert (war 303)
- requirements.txt (inkl. aktuellen Versionsangaben) zum Projekt und zum Git-Repository hinzugefügt

## [1.0.12] - 2023-02-13
### Bug fix
- GUIKomponenten.Ui_MainWindow: Fenster-Zentrierung korrigiert
### Changed
- LiSAnzeige.py: Informationstext zum Bezug des Quelltextes angepasst

## [1.0.11] - 2022-03-09
Nur NRW-Version, keine äquivalente IQB-Version (da nicht erforderlich)
### Bug fixes
- LiSVernichtung.QVerzeichniseintrag: Methode _vernichten(...) um else-Bedingung für Fehlermeldung "Verzeichnis nicht leer" ergänzt
- LiSAnzeige.QView: Methode aehleVerschluesselungMitPasswort_Kommandozeile(...) korrigiert

## [1.0.10] - 2022-01-16
### Changed
- Ale Jahresangaben in 2022 geändert
- LiSVernichtung.py: Überarbeitung basierend auf neuestem Commit im Master-Branch von BleachBit (b561d95)
- LiSWindowsWipe.py: Überarbeitung basierend auf neuestem Commit im Master-Branch von BleachBit (b561d95)
- LiSWerkzeuge.py: Klasse Verzeichniswerkzeuge hinzugefügt
- LiSWerkzeuge.Verzeichniswerkzeuge: Statische Methode Verzeichniswerkzeuge.istVerzeichnis(...) hinzugefügt
- LiSCrypt.py: High-DPI-Scaling (wieder) deaktiviert
### Bug fix:
- Ui_MainWindow.Ui_MainWindow: Methode waehleSchluesselartPasswort_Kommandozeile(...) ergänzt
- Ui_MainWindow.Ui_MainWindow: Methode waehleSchluesselartSchluesseldatei_KlickAufDateiFeld_OderKommandozeile in zwei Methoden aufgeteilt
- LiSCrypt.QController: starteFunktionAusParameterliste verwendet jetzt Methode Ui_MainWindow.Ui_MainWindow.waehleSchluesselartPasswort_Kommandozeile(...)
- LiSCrypt.QController: starteFunktionAusParameterliste wertet nach Schlüsseldateiauswahl jetzt aus, ob wirklich eine Schlüsseldatei aus gewählt wurde
- LiSAnzeige.QView: waehleVerschluesselungMitPasswort() -> waehleVerschluesselungMitPasswort_Kommandozeile
- LiSAnzeige.QView: waehleVerschluesselung liefert Wert zurück, ob tatsächlich eine Schlüsseldatei ausgewählt wurde
- LiSWindowsWipe.py: Methode file_wipe(...) um obligatorisches Schließen des File-Handles ergänzt
- psutil (Fremdpaket): Fehler behoben -> 3.9.0 (führte zum Abbruch von LiSCrypt beim Vernichten, wenn schreibgeschütztes Laufwerk eingebunden ist)
- LiSAnzeige.QView: Vollständiger Name der Methode zeigeSchluesseldateiauswahlDialog(...) wieder hergestellt (führte zu Programmabbruch)

## [1.0.9] - 2021-02-23
### Changed
- Ui_MainWindow.Ui_MainWindow: Debugging-Loging-Level wird bei 'Bereit.' in Statuszeile angezeigt
### Bug fix
- LiSCrypt.QControllerWorkerThread: Debugging-print()-Anweisung in Methode fuehreFunktionAus() entfernt

## [1.0.8] - 2021-02-19
### Bug fix
- LiSKonstanten.C_LOGGING_LEVEL auf logging.ERROR zurückgesetzt (irrelevant für pakettierten Betrieb)

## [1.0.7] - 2021-02-18
### Changed
- Ui_PasswordDialog.Ui_PasswordDialog: Minimale Passwortlänge in Methode _checkInput() durch LiSKonstanzen.C_PASSWORT_SCHLUESSELDATEI_MINLAENGE ersetzt
- Ui_PasswordDialog.Ui_PasswordDialog: _checkInput() in _ueberpruefeUndReservierePasswort() umbenannt
- Ui_PasswordDialog.Ui_PasswordDialog: Einzelne Kommentare und Dokumentationsstrings ergänzt/korrigiert
- LiSCrypt.py: Überprüfung des vom Passwortdialog zurückgebenen Passworts auf 0-Byte-String in QControllerWorkerThread._zeigePasswortDialog()
- LiSCrypt.py: Verlagerung der Löschung der globalen Passwortreferenz (self._sPasswortString) von QControllerWorkerThread.fuehreFunktionAus() in QControllerWorkerThread._zeigePasswortDialog()
- LiSAusnahmen.py: Erweiterung von QNoPasswordError um Möglichkeit, eine Fehlermeldung zu übergeben
- LiSAnzeige.py: Leichte Anpassung des Textes im Über-Dialog zur Quelltextverfügbarkeit
### Bug fix
- LiSKrypto.py: Korrekte Auswertung der maximalen Dateigröße für AES-GCM 256

## [1.0.6] - 2021-01-18
### Changed
- LiSWerkzeuge.py: Statische Methode Loggingwerkzeuge.loggeMitLoglevelDebugWennNichtPaketiert hinzugefügt und sensible logging.debug-Aufrufe darauf umgestellt
- LiSKonstanten.py: Logischere Platzierung von C_LOGGING_LEVEL
- LiSAnzeige.py: Über-Dialog: Details zur Zugänglichmachung des Quelltextes aktualisiert
### Bug fix
- Ui_PasswordDialog.py: Korrekte Einbindung eines Monospace-Font unter Windows und macOS

## [1.0.5] - 2021-01-11
### Changed
- LiSWerkzeuge.py: Statische Methode zum Vergleich von Versionsstrings hinzugefügt (Stringwerkzeuge.vergleicheVersionen)
- LiSKrypto.py: Nutzung von Stringwerkzeuge.vergleicheVersionen zum Vergleich mit der zur Entschlüsselung erforderlichen LiSCryptversion

## [1.0.4] - 2021-01-11
### Changed
- LiSSingleton.py: Vervollständigung der Dokumentationskommentare

## [1.0.3] - 2021-01-11
### Changed
- Alle Quelltextdateien: Anpassung der Jahreszahl der Veröffentlichung

## [1.0.2] - 2020-12-18
### Changed
- LiSApplication.QFileOpenEventApplication: Referenzübergabe zur Instanz von QView (Haupt-Viewkomponente) wieder entfernt (zu Debugging-Zwecken hinzugefügt)

## [1.0.1] - 2020-12-18
### Changed
- LiSApplication.QFileOpenEventApplication: Vereinigung mehrerer paralleler QFileOpenEvents (macOS) zu einem Prozesstart
- LiSWerkzeuge.Prozesswrtkzeuge: Verschiebung vonermittleAnzahlLaufenderLiSCryptProzesse() in LiSSingleton.py; Einbeziehung der IQB-Version
### Bug fix:
- Ui_MainWindow.DQListWidget: Ausgabe der per Drag-and-Drop übergebenen Verzeichniseinträge wieder entfernt (zu Debugging-Zwecken hinzugefügt)
- LiSCrypt.QControllerWorkerThread: Korrekte Parameterübergabe bei Emittierung des Signals C_FUNKTION_WIEDERHOLEN_BUTTON_SICHTBAR_SIGNAL

## [1.0.0] - 2020-12-14
### Added
- Das zuletzt eingegebene Passwort kann nun bis zum Schließen des Programms zwischengespeichert werden (Wunsch des IQB)
- Sonderfunktionen "Letzte Ver-/Entschlüsselung rückgängig machen" bzw. "Letzte Programmfunktion wiederholen", inkl. Status von "Originale vernichten"
- ContextMenu Shell-Extension für Windows-Betriebssysteme zum Aufruf per Rechtsklick
### Changed
- Sicherheit: Verschleierte Speicherung der Konfigurationsdatei
- Sicherheit: Blockade zu kurzer Passwörter und Schlüsseldateien (< 8 Zeichen) bei Verschlüsselung
- Sicherheit: Erschwerung von core dumps unter unixoiden Betriebssystemen
- Sicherheit: Überschreiben sensibler Strings und Bytesequenzen im Prozessspeicher mit 0-Werten
- Debugging-Checks auf fälschlicherweise auf 0 gesetzte Bytesequenzen bei Verschlüsselung (permanent verfügbar)
- Merken des aktuellen Passworts
- Verhinderung der Anzeige eines 'gemerkten' Passworts
- Kommandozeilenoption für 'Originale vernichten' hinzugefügt
- Font im Passworteingabe- und Bestätigungsfeld auf 'monospace' (systemabhängiger Monospace-Font) gesetzt
- Änderung Problemmeldung: "Bitte kontrollieren Sie das Protokoll." -> "Bitte beachten Sie die Fehlermeldungen."
- Windows: Update auf vcredist_x86 2019 und vcredist_x64 2019 (s. https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads)
- Vergleich Dateiendung '.lisx' bzw '.lisq' ist jetzt case insensitive
- Bei Aufruf mit Parameterliste wird die Größe des Hauptfensters jetzt auf normal gesetzt, wenn das Hauptfenster vorher minimiert war
- Überprüfung der Prozessliste auf 'liscrypt' vor Start als Master
- Funktionsbuttons wechseln Farbe abhängig von der darüber auszuführenden Programmfunktion (schwarz/grün/rot)
- Literale für Programmfunktionen ('Verschlüsseln'/'Entschlüsseln'/'Vernichten') durch globale Konstanten ersetzt
- Portierung auf Python 3.9.x (Wegfall von os.stat_float_times(...))
- Viele kleine Verbesserungen und Korrekturen
### Bug fix:
- Noncen für ChaCha20_V3 bzw. ChaCha20_V3_1 werden jetzt korrekterweise mithilfe des Zählers für ChaCha20 generiert (vorher irrtümlich Zähler für AESGCM_V3 verwendet)
- Klick auf "Abbrechen" im Passwortdialog führt nun nicht mehr zum Programmabbruch
- Aufruf mit Parameterübergabe produziert keine "Beschäftigt"-Meldung mehr, wenn keine Aktion ausgeführt wird (keine Übergabe von Dateinamen)
- Das "Über LiSCrypt"-Menü weist nun für LiSCrypt IQB überall den zusatz 'IQB' aus

## [0.9.7] - 2019-04-17
### Changed
- CERT.NRW: Austausch von pickle gegen yaml mit SafeLoader zur Vermeidung von Arbitrary Code Execution über Socket
- CERT.NRW: Whitelisting der per Socket übertragenen Aufrufparameter vor programmatischer Verwendung
- CERT.NRW: Austausch aller Assert-Statements gegen äquivalente if-Abfragen (Ausnahme: LiSWindowsWipe.py, da Fremdcode)
- Entfernung von überflüssigem Code aus QFunktionsstarterThread (basierte auf früherer Programmversion)
- Erforderliche Version für Entschlüsselung ist jetzt 0.9.7
### Bug fix:
- Auch symbolische Verknüpfungen (Posix) und FIFOS (named pipes) werden jetzt vor ihrer Vernichtung zweimal zufällig umbenannt
- 'NoneTypeObject has no attribute...'-Exception bei Info-/Warn-/Fehlerdialogen außerhalb der Ausführung von Programmfunktionen wird vermieden
- 'LiSKonstanten.C_DATEIENDUNG' -> LiSKonstanten.C_DATEIENDUNG (einige Stellen im Quellcode) korrigiert
- Vernichtung von Verzeichnissen mit Unterverzeichnissen verursacht keine Fehlermeldung mehr
- Endzeitpunkt wird nur noch ausgegeben, wenn zuvor ein Startzeitpunkt ausgegeben wurde
- Aufruf von _zeigeFehlerDialog in _zeigeFehlerDialogModal in Klasse QControllerWorkerThread geändert

## [0.9.6] - 2019-04-12
### Changed
- Ausführung einer Programmfunktion endet jetzt mit Ausgabe einer Ende-Zeile
- Fehlermeldungen im Prozess resultieren jetzt in einem Hinweisfenster am Ende der Funktionsausführung
- Verschlüsselung/Entschlüsselung schlägt jetzt fehl, sobald eine Datei im Zugriff ist (+ entsprechende Fehlermeldungen)
- Erforderliche Version für Entschlüsselung ist jetzt 0.9.6
### Bug fix
- Entschlüsselung: Temporär entschlüsselte Dateien (Zufallsname) werden bei Namenskonflikt mit bestehender Datei jetzt in jedem Fall vernichtet

## [0.9.5] - 2019-04-02
### Changed
- LiSCrypt IQB nutzt anderes Verzeichnis als LiSCrypt für Konfigurationsdatei unter Windows, macOS und Linux
### Bug fix
- Unter macOS öffnet sich jetzt korrekt der Finder bei Klick auf Protokolleintrag (Umsetzung per subprocess.call)

## [0.9.4] - 2019-04-01
### Changed
- Zusammenarbeit zwischen View-Komponenten und Controller-Komponenten bei Schlüsseldateierzeugung modifziert
- Option zum Kopieren des Verlaufprotokolls in die Zwischenablage im Pulldownmenu hinzugefügt
- Programmfunktion 'Vernichten' aus IQB-Version entfernt
- Abbruchmöglichkeit während Funktionsprozess (bei Ver- und Eetschlüsselung)
- Explizite Berücksichtigung von Names Pipes (FIFOs) bei Ver- und Entschlüsselung
- Verbesserung des Exception-Handlings
- Anfang: Verbesserung der Statusanzeige in Statuszeile
- Reaktion auf QFileOpenEvent unter macOS
- IQB-Version verwendet jetzt Endung '.lisq' statt '.lisx'
- Statuszeile gibt jetzt genauer über aktuell ausgeführte Funktion Auskunft
- Kennzeichnung einiger Methoden zu alten Verschlüsselungsverfahren als DEPRECATED
- PyYAML auf Version 5.1 aktualisiert
- yaml.load() für Konfigurationsdatei jetzt unter Angabe eines Loaders (arbitrary code execution vulnarability)
- 'Verzeichnis' durch 'Ordner' ersetzt in Ui_Listdialog.py
- psutil auf Version 5.6.1 aktualisiert
- Pulldown-Menü 'Bearbeiten' aus IQB-Version entfernt
- Anpassung einiger Fehlermeldungen
- Ausweitung der Endnutzer-Dokumentation
- Verhinderung der Verschlüsselung einer Schlüsseldatei mit sich selbst (Fehlermeldung)
- Austausch einzelner Assert-Statements gegen if-Abfragen
### Bug fix
- Fehlversuch, eine Schlüsseldatei zu erzeugen resultiert jetzt korrekt in Fehlermeldung
- Doppelklick auf Einträge im Listenfeld OHNE Tooltip (i.d.R. Pfadangabe) öffnet nicht mehr den Dateimanager
- Löschen der Zwischenablage funktioniert wieder korrekt
- Auswahldialog-Option 'Nur verschlüsselte Dateien [...] ausblenden' in 'Verschlüsselte Dateien ausblenden' geändert

## [0.9.3] - 2019-03-06
### Changed
- (Symbolische) Verknüpfungen und named pipes werden bei der Vernichtung nicht mehr übersprungen, sondern entfernt
- default-Aktion bei gültigem Aufruf mit Parametern ist jetzt '--decrypt' (statt vorher '--encrypt')
- Dokumentation um Doppelklick-Funktionalität (siehe Version 0.9.2) ergänzt
- Dokumentation um Hinweis zur grundsätzlichen Funktionsweise von LiSCrypt (entschlüsseln, nicht öffnen) ergänzt
- Dokumentation um Fehlermeldungen ergänzt
### Bug fix
- Konfiguration wird nur noch einmal (statt fälscherlicherweise zweimal) eingelesen

## [0.9.2] - 2019-03-02
### Changed
- Entschlüsselung im System-Temporärverzeichnis wird aus Sicherheitsgründen verhindert
- Doppelklick auf Eintrag in Protokoll öffnet den jeweiligen Ordner im Dateimanager
- Entfernung der Anmerkung 'Pfad zu lang?' aus Fehlermeldung, falls Datei/Verzeichnis nicht gefunden wird
- pyca/cryptography auf Version 2.6.1 aktualisiert
- psutil auf Version 5.5.1 aktualisiert
### Bug fix
- Thread-Handling verbessert: Auch offener Dialog verhindert Parallelausführung mit Parametersteuerung

## [0.9.1] - 2019-02-20
### Changed
- Tippfehler in LiSVernichtung (Meldung: 'felgeschlagen') beseitigt
- URL in Über-Dialog korrigiert (liscrypt_public)
- README.MD zum Repository hinzugefügt
- PyQt5 in Version 5.11.2 geändert
- pyca/cryptography auf Version 2.5 aktualisiert
- psutil auf Version 5.5.0 aktualisiert
- Kleinere Fehler in Dokumentation korrigiert
- Versionskonstante in LiSKonstanten auf 0.9.1 geändert
- Windows: Distribution inkl. vcredist_x86 2015 Update 3 und vcredist_x64 2015 Update 3
- Veraltete verschlüsselte Testdateien entfernt
- Tippfehler in Menü entfernt ('Über LisCrypt' -> 'Über LiSCrypt')
- Installer verweigert jetzt Installation auf 32-Bit-Systemen

## [0.9] - 2019-01-29
### Changed
- Separate IQB-Version über Boolean-Flag LiSKonstanten.C_IQB_VERSION
- Passworteingabe jetzt optional sichtbar
- Verwendung von argparse zum Parsen der Aufrufparameter
- Blockierung von Anweisungen per Parameter, während Funktionsprozess läuft (concurrency)
- Optimierung der Vernichtungsroutine
- Entfernung der mit pywin32 testweise realisierten Windows-Shell-Extension
- Auslassung der Schlüsselart beim Kommandozeilenaufruf öffnet Dialogfenster zur Schlüsselwahl
- .ico-Datei mit mehreren Auflösungen (16x16 bis 256x256) hinzugefügt
- Ergänzung und Überarbeitung einiger Dokumentationskommentare
### Bug fix
- Korrektur / -> // für Ganzzahldivision in LiSWindowsWipe (Python 2 -> Python 3)
- Abfangen von OSError in Dateidialogen (tritt z.B. bei leeren CD-Laufwerken auf) (filterAcceptsRow())
- Spätere Schlüsselart-Auswahl ist nur noch default, wenn nicht IQB-Version (sonst Passwort)
- Vermeidung von race conditions bei os.rename auf Netzlaufwerken in LiSVernichtung.py
- SchluesselartMessageBox schließt jetzt korrekt bei Betätigung des Close-Buttons (X)
- "Beschäftigt"-MessageBox funktioniert jetzt korrekt

## [0.6.4] - 2018-12-21
### Changed
- Auswahl für Schlüsseldatei optimiert (u.a. keine Auswahl von Leerdateien möglich)
- Anzeige einer Warnung vor Leerung der Zwischenablage

## [0.6.3] - 2018-12-12
### Changed
- Schlüssellänge für HMAC bei ChaCha20 auf 64 Bit erweitert
- Option 'ReadOnly' für Dateidialoge gesetzt, um unsicheres Löschen zu unterbinden
- Prüfung auf leeren Passwortstring bei Berechnung des SHA256- und SHA512-Hashwertes
- Anleitung erweitertert (noch nicht fertig gestellt)
### Bug fix
- Überprüfung der Lebensdauer eines Schlüssels korrigiert und ausgeweitet

## [0.6.2] - 2018-12-10
### Changed
- Temporäre V2_1-Verschlüsselungsformate entfernt

## [0.6.1] - 2018-12-10
### Bug fix
- Anzeige der Funktion bei Funktionsausführung jetzt korrekt
- Update des Statusleiste wird nur durchgeführt, wenn neuer Text sich von altem unterscheidet
- Symbolische Links werden nun erst bei Funktionsausführung ausgefiltert

## [0.6] - 2018-12-06
### Changed
- Einführung der Verschlüsselungsschemata AES-GCM-V3 bzw. ChaCha20-V3
- Konstanter Crypt-Schlüssel für maximale Anzahl von Dateien
- Ableitung der Nonce für AES-GCM bzw. ChaCha20 jetzt per HKDF mit Zähler statt per Zufall
- Komplette Umstellung auf SHA512 (statt vormals SHA256)

## [0.5.1] - 2018-11-21
### Changed
- Beschränkung auf HKDF-Expand bei Verschlüsselung

## [0.5.0] - 2018-11-20
### Changed
- Kryptographie-Backend von PyCryptodome zu Cryptography gewechselt
- Verzicht auf base91-Kodierung von Input für Scrypt (Rückwärtskompatibilität ist sichergestellt)
- Sicherheitsparameter für Scrypt angepasst (N=2**18)

## [0.4.9] - 2018-11-14
### Changed
- Nullfolge in den verschlüsselten Dateiinhalten vorangestellt (Beschleunigt Prüfung der Entschlüsselung)

## [0.4.8] - 2018-11-13
### Changed
- Sicherheitsparameter für Scrypt angepasst (N=2**17)

## [0.4.7] - 2018-11-13
### Bug fix
- Vernichtung verursacht auf Netzwerklaufwerken jetzt keine Fehlermeldung mehr
- Nach Vernichtung bleibt die Auswahl zur Schlüsselart jetzt deaktiviert

## [0.4.6] - 2018-11-09
### Bug fix
- Wiederholte Berechnung von Master-Schlüssel bei Entschlüsselung, falls notwendig
- Fehler bei Auswertung der Aufrufparameter behoben
- Reduzierung des Scrypt-Aufwandsfaktors N auf 2**18

## [0.4.5] - 2018-10-31
### Bug fix
- Print-Anweisungen zum Debugging entfernt

## [0.4.4] - 2018-10-31
### Bug fix
- Fehler in der Entschlüsselung behoben (Entschlüsselung setzte zu früh in der Quelldatei auf)

## [0.4.3] - 2018-10-18
### Bug fix
- Fehlermeldung beim "Ungültiger Befehl." Start über Kommandozeile sollte nun in den richtigen fällen angezeigt werden
- Version für Albert!

## [0.4.2] - 2018-10-18
### Bug fix
- Client-Server-Kommunikation optimiert
- Version für Albert!

## [0.4.1] - 2018-10-17
### Changed
- Kommandozeilenparameter eingeführt
- Client-Server-Kommunikation für neue Instanzen eingeführt

## [0.4] - 2018-10-12
### Changed
- Vernichtungsroutine deutlich ausgebaut
- Klassenstruktur der Vernichtungsklasse deutlich optimiert
- Block für zu alte Versionen implementiert

## [0.3.20] - 2018-10-05
### Changed
- Kommandozeilenparameter '-logfile' eingeführt, Logging sonst in Konsole, ebenso Zugriffsproblemen auf Logdatei
- Konnte der Root-Logger vor einem fatalen Fehler noch nicht gestartet werden, erfolgt Fehlerausgabe mit print()
- Für SHA256-Berechnung wird nun die SHA256-Implementation von PyCryptodome verwendet
- Debug-Print-Ausgaben bei Ver- und Entschlüsselung entfernt

## [0.3.19] - 2018-10-01
### Bug fix
- Fehlerlogging bei nicht vorhandener Konfigurationsdatei angepasst

## [0.3.18] - 2018-10-01
### Bug fix
- Fehlermeldung beseitigt, falls Konfigurationsdatei beim Programmstart nicht gefunden wird.

## [0.3.16] - 2018-10-01
### Changed
- Verzeichnisse für Konfig- und Logdatei sowie Arbeitsverzeichnis werden jetzt betriebssysmabhängig festgelegt

## [0.3.15-rc1-10] - 2018-09-26
### Changed
- Längere Saltwerte zur Steigerung der Sicherheit

## [0.3.15-rc1-9] - 2018-09-26
### Changed
- Änderung der Programmstruktur (Aufteilung auf Klassen, Abtrennung der Dateibehandlung in LiSKrypto.py)
- Header-Erzeugung und -Verarbeitung in Methoden ausgelagert
- Schlüsselermittlung und Ver- bzw. Entschlüsselungsprozess für verschiedene Verfahren stark modularisiert
- Einführung Kombination aus MK (Scrypt mit sehr hohem Aufwandsfaktor) und DPK (HDKF)
- Lodatei wird nun bei jedem Programmstart geleert
- Gründlichere Prüfung auf geeignete Dateien für Programmfunktion (ansonsten Fehlermeldung)
- Skalierung für HighDPI-Monitor zunächst deaktiviert (Probleme unter Linux)

## [0.3.15-rc1-8] - 2018-09-02
### Changed
- Datei-Chunkgröße für SHA256-Hashberechnung und Ver- bzw. Entschlüsselung wird nun nicht mehr im Header
von verschlüsselten Dateien gespeichert, da bei AES-GCM, ChaCha20 und SHA256 beliebig.
- Neue Konstanten C_VERFAHREN_AES_GCM_KENNUNG_V2 und C_VERFAHREN_AES_CHACHA20_KENNUNG_V2 zur Sicherung der
Kompatibilität mit Versionen < 0.3.15-rc1-8 zu gewährleisten.
- Entschlüsselung entsprechend angepasst; Lesen der Datei-Chunkgröße erfolgt nur bei Verfahrenskennung
C_VERFAHREN_AES_GCM_KENNUNG_V1 oder C_VERFAHREN_AES_CHAHCA20_KENNUNG_V1 in verschlüsselter Datei

## [0.3.15-rc1-7] - 2018-08-03
### Fixed
- Skalierungsoptionen angepasst. Keine Maximalgrößen mehr gesetzt.

## [0.3.15-rc1-6] - 2018-07-20
### Fixed
- Beschriftung des Aktionsbuttons von Dateiauswahldialogen bleibt bei Selektion eines Verzeichnisses erhalten

## [0.3.15-rc1-5] - 2018-07-19
### Changed
- Sortierung der Dateiauswahldialoge ist jetzt fest und folgt weitergehend dem Windowsschema (Verzeichnisse vor Dateien, sonst alphabetisch)
- Schlüsseldateien bekommen jetzt die Endung '.txt', wenn keine Endung angegeben wird
- Die Sicherheitsabfrage vor dem Überschrieben von Schlüsseldateien ist jetzt qt-nativ

## [0.3.15-rc1-4] - 2018-07-18
### Changed
- Vorgeschlagener Name für Schlüsseldateien endet jetzt auf '.txt'

## [0.3.15-rc1-3] - 2018-07-18
### Fixed
- Verschlüsselung: Ersetzung des letzten Punktes in Dateipfaden durch Minuszeichen auf Endnamen (tail) beschränkt
### Changed
- Verzeichnisse werden in Auswahldialogen jetzt vor Dateien einsortiert; Änderung Detailansicht->Listenansicht
- Sortierung im +-Auswahldialog ist nun nicht mehr Case Sensitive

## [0.3.15-rc1-2] - 2018-07-16
### Fixed
- Treeview-Verweis in Klasse KombinierterFileDialog wieder global gemacht

## [0.3.15-rc1] - 2018-07-16
### Changed
- qm-Translation-Datei als base64-String in LiSKonstanten aufgenommen
- Sicherheitsabfrage beim Überschreiben von Schlüsseldateien eingeführt
- Auswahlmöglichkeit für die Anzeige von Dateien im Auswahldialog (+-Button) eingeführt

## [0.3.14] - 2018-07-13
### Changed
- Klasse Ui_KeyFileDialog.SchluesseldateiFileDialog eingeführt

## [0.3.13] - 2018-06-07
### Fixed
- +-Button wird nun während Aktion auf inaktiv gesetzt

## [0.3.12] - 2018-06-06
### Changed
- Pulldown-Menüs entfernt (Verschlüsseln/Entschlüsseln/Vernichten)
-+-Button zur Dateiauswahl hinzugefügt

## [0.3.11] - 2018-05-21
### Fixed
- Vernichten über Pulldownmenü sollte jetzt funktionieren
- Bestätigungsdialog beim Vernichten enthält nun den richtigen Text

## [0.3.10] - 2018-05-18
### Fixed
- Berechnung der Dateinamenlänge auf Basis der verwendeten Bytes (nicht Zeichen)

## [0.3.9] - 2018-05-18
### Changed
- Allgemeines Logging bei Fehlern im Verschlüssungs-, Entschlüsselung und Vernichtungsprozess hinzugefügt

## [0.3.7] - 2018-05-18
### Fixed
- Bug bei AES-Entschlüsselung korrigiert (Verwendung einer Variablen vor Zuweisung)

### Changed
- Lizenz (GPL) entfernt

## [0.3.6] - 2018-05-17
### Changed
- Länge des ursprünglichen Dateinamen wird nun unverschlüsselt im Header gespeichert.

### Fixed
- Ver- und Entschlüsselung von großen Dateien mit ChaCha20